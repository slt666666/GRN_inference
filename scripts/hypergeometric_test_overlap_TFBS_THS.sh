# hypergeometric test to determine the overlap between TFBSs and THSs

treat="wt_a4_vs_un"                                         # which comparison
regionBed="DARs/${treat}.narrowPeak.bed"                    # DARs identified by 2.
promoterBed="reference/TAIR10_promoters.sorted.merged.bed"  # promoter bed generated by 5.
chromLength="reference/TAIR10_chr_len.txt"                  # chromosome length
nShuffling=1000

out_file="PWM_mapping/${treat}_TFBS_pvalue.txt"             # output file name

# hypergeometric test for each motif result
for motif in all_motifs;do
    motiffile=PWM_mapping/Ensemble_merged/${motif}.bed
    shufflednumbers=${motif}_shuffled_numbers.txt

    # find how many TFBSs ($motiffile) overlap with THS sites ($regionBed) using Bedtools
    realNumber=`bedtools intersect -a $motiffile -b $regionBed -u -f 0.5 | wc -l`

    # for nShuffling times generate the shuffled TFBSs, check their overlap with THS sites and save the numbers in “shufflednumbers” file.
    for i in `seq 1 $nShuffling`; do
        shuffledFile="PWM_mapping/${treat}/shuffled_"$motif"_"$i".out"
        bedtools shuffle -i $motiffile -g $chromLength -noOverlapping -excl $motiffile -incl $promoterBed > $shuffledFile
        number=`bedtools intersect -a $shuffledFile -b $regionBed -u -f 0.5 | wc -l`
        echo ${number} >> $shufflednumbers
        rm -rf PWM_mapping/${treat}/shuffled_${motif}_${i}.out
    done

    # calculate the p-value of enrichment
    countBigger=1
    for eachNumber in `cat $shufflednumbers`; do
        if [ $eachNumber -ge $realNumber ]; then
            countBigger=$(( $countBigger+1 ))
        fi
    done
    pvalue=$(awk "BEGIN { print $countBigger/$nShuffling }")
    echo -e "${motif}\t${treat}\t${realNumber}\t${nShuffling}\t${countBigger}\t${pvalue}" >> $out_file
done

# calculate the q-values
python3 calc_q_values.py $out_file PWM_mapping/${treat}_TFBS_qvalue.txt